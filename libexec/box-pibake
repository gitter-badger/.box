#!/usr/bin/env bash
# Usage: box pibake
# Summary: write an raspberry pi image to sd card
# Help: 
# 1. Simply execute the install script from Terminal and pass the image to write. (Image, not ZIP)
#
#   eg. `sudo ./box/bin/box pibake ~/Downloads/wheezyDebian.img`
#
# 2. Select the disk to write the image to by selecting the disk number provided in the output.
#
# 3. Wait for disk to finish writing. You can check the write progress with `Ctrl+T`.

source "$_BOX_ROOT/lib/box_functions"
# set -e

function banner(){
info '
__________.___  .___                 __         .__  .__                
\______   \   | |   | ____   _______/  |______  |  | |  |   ___________ 
 |     ___/   | |   |/    \ /  ___/\   __\__  \ |  | |  | _/ __ \_  __ \
 |    |   |   | |   |   |  \\___ \  |  |  / __ \|  |_|  |_\  ___/|  | \/
 |____|   |___| |___|___|  /____  > |__| (____  /____/____/\___  >__|   
                         \/     \/            \/               \/       
'
}

# Set $1 as image path
DISTRO="$1"
echo $DISTRO

# Check image path is set else exit
if [ -z "$DISTRO" ]; then
    line
    error "ERROR: No image path supplied"
    line
    die
fi

# Selected disk
_udisk=""

function promptDisk() {
    # ================================================
    # Check connected disks and save paths to array
    # ================================================

    # Counter
    i=0

    line

    # Loop over df -lh
    while read disk; do
        # Print with local mount only and add counter to select disk
        if [ "$i" -gt 0 ]; then
            echo "$i) $disk"
            # Asign first work (path) to array with corresponding counter
            _mount[i]=$( echo $disk | awk '{print $1;}')
        else
            info "   $disk"
        fi
        # Increment counter
        ((i++))
    done <<< "$(df -h)"
    line

    _opts=''
    for i in "${!_mount[@]}"; do
        [ -z "$_opts" ] && _opts="${_opts}${i}" || _opts="${_opts}, ${i}"
    done

    # Ask user to select mounted disk
    echo "Select the disk to use by enetering the disk number."
    warn "*** MAKE SURE YOU SELECT THE CORRECT DISK ***"
    warn "*** Refer to the Readme if uncertain ***"
    echo -n -e "\nUse disk [ $_opts ] #"
    read ans

    # Set selected disk
    _udisk=${_mount[$ans]}

    # Test if valid disk selected
    if [ -z "$_udisk" ]; then
      clear
      error " ======= Invalid selection ======= "
      banner
      promptDisk
    fi
}

# Run prompt
clear
banner
promptDisk


# ===========================================================
# Past this point a valid disk has been selected, so proceed.
# ===========================================================
clear
banner

# Format disk name to raw format
_rawdisk=$( echo $_udisk | awk 'sub("..$", "")' | sed 's/disk/rdisk/')

# Unmount Disk
action "Unmounting Disk"
diskutil unmount $_udisk
ok

action "Writing image"
pv ${DISTRO} | sudo dd bs=1m of=${_rawdisk}

# Eject disk
action "Ejecting Disk"
diskutil eject ${_rawdisk}

die "All Done!"